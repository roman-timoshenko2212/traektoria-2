import pandas as pd
import requests
from collections import defaultdict
from natasha import Segmenter, MorphVocab, NewsEmbedding, NewsNERTagger, Doc
import argparse
import os
import csv
import sys
import codecs

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8 –¥–ª—è stdout –∏ stderr
sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
sys.stderr = codecs.getwriter('utf-8')(sys.stderr.detach())

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—É—Ç–µ–π
ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_DIR = os.path.join(ROOT_DIR, "data")
PARSED_ADDRESSES_DIR = os.path.join(DATA_DIR, "parsed_addresses")
GEOCODED_DIR = os.path.join(DATA_DIR, "geocoded_results")
ROUTE_RESULTS_DIR = os.path.join(DATA_DIR, "route_results")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
os.makedirs(PARSED_ADDRESSES_DIR, exist_ok=True)
os.makedirs(GEOCODED_DIR, exist_ok=True)
os.makedirs(ROUTE_RESULTS_DIR, exist_ok=True)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--excel", required=True)
    parser.add_argument("--openrouter_key", required=True)
    parser.add_argument("--model", required=True)
    parser.add_argument("--route", help="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", default=None)
    args = parser.parse_args()

    filepath = args.excel
    api_key = args.openrouter_key
    model = args.model
    target_route = args.route

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏–ª–∏ —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π
    routes = extract_routes(filepath, target_route)
    
    if not routes:
        print(f"‚ùå –ú–∞—Ä—à—Ä—É—Ç(—ã) –Ω–µ –Ω–∞–π–¥–µ–Ω(—ã).")
        return
        
    all_exceptions = [] # –°–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π (–¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ stdout)

    for route_name, addresses_with_rows in routes.items():
        addresses = [addr for _, addr in addresses_with_rows]
        current_route_addresses = [] # <-- –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        route_exceptions = [] # <-- –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞

        print(f"\n=== üöö –ú–∞—Ä—à—Ä—É—Ç: {route_name} ===")
        cleaned_result = send_route_to_llm(route_name, addresses, api_key, model)
        lines = [line for line in cleaned_result.split("\n") if line.strip()]

        valid_lines_output = [] # –î–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        for i, (excel_row, _) in enumerate(addresses_with_rows):
            if i >= len(lines):
                print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–∫ –æ—Ç LLM –¥–ª—è —Å—Ç—Ä–æ–∫–∏ Excel {excel_row}")
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å "–ø—É—Å—Ç—É—é" –∑–∞–ø–∏—Å—å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å - –ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                continue
            line = lines[i]
            if "." not in line:
                 print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –æ—Ç LLM (–Ω–µ—Ç —Ç–æ—á–∫–∏-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è): '{line}'")
                 # –†–µ—à–∞–µ–º, –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –∫–∞–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ? –ü–æ–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π
                 original_address = addresses[i] # –ë–µ—Ä–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∞–¥—Ä–µ—Å
                 route_exceptions.append((excel_row, original_address))
                 current_route_addresses.append((excel_row, original_address))
                 continue
                 
            _, content = line.split(".", 1)
            content = content.strip()
            
            if is_only_region_and_district(content):
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                route_exceptions.append((excel_row, content))
                all_exceptions.append((excel_row, content, route_name)) # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–ª—è stdout
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª (–∫–∞–∫ –µ—Å—Ç—å)
                current_route_addresses.append((excel_row, content)) 
            else:
                valid_lines_output.append(line) # –î–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
                current_route_addresses.append((excel_row, content))

        print("\n=== ‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ (–¥–ª—è –∫–æ–Ω—Å–æ–ª–∏) ===")
        for line in valid_lines_output:
            print(line)
            
        # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CSV –¥–ª—è –¢–ï–ö–£–©–ï–ì–û –º–∞—Ä—à—Ä—É—Ç–∞ --- 
        file_name = sanitize_filename(route_name)
        output_path = os.path.join(PARSED_ADDRESSES_DIR, f"parsed_addresses_{file_name}.csv")
        
        try:
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            sorted_route_addresses = sorted(current_route_addresses, key=lambda x: x[0])
            
            with open(output_path, "w", encoding="utf-8", newline="") as csvfile:
                writer = csv.DictWriter(csvfile, fieldnames=["excel_row", "route_name", "normalized_address"])
                writer.writeheader()
                for row_num, address_text in sorted_route_addresses:
                    writer.writerow({
                        "excel_row": row_num,
                        "route_name": route_name, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
                        "normalized_address": address_text
                    })
            print(f"\nüìÑ –ê–¥—Ä–µ—Å–∞ –º–∞—Ä—à—Ä—É—Ç–∞ '{route_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}")
        except Exception as e:
             print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ CSV –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ '{route_name}': {e}")
        # --- –ö–æ–Ω–µ—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ --- 

    # –í—ã–≤–æ–¥ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ stdout –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if all_exceptions:
        print("\n=== ‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è stdout) ===")
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ –∏–º–µ–Ω–∏ –º–∞—Ä—à—Ä—É—Ç–∞, –∑–∞—Ç–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–æ–∫–∏
        sorted_global_exceptions = sorted(all_exceptions, key=lambda x: (x[2], x[0])) 
        for excel_row, text, route_nm in sorted_global_exceptions:
            print(f"–ú–∞—Ä—à—Ä—É—Ç '{route_nm}', –°—Ç—Ä–æ–∫–∞ {excel_row}: {text}")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Natasha ===
segmenter = Segmenter()
morph_vocab = MorphVocab()
emb = NewsEmbedding()
ner_tagger = NewsNERTagger(emb)

PROMPT_TEMPLATE = """
–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∞–¥—Ä–µ—Å–æ–≤.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –Ω–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ —Å—Ç—Ä–æ–≥–∏–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–∏–≥–æ–¥–Ω—ã–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥–µ–æ–∫–æ–¥–µ—Ä.

–ú–∞—Ä—à—Ä—É—Ç: {route_name}

‚ÄºÔ∏è –£—á–∏—Ç—ã–≤–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –ø—Ä–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –Ω–µ–ø–æ–ª–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤. –û–Ω–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏–æ–Ω–µ, –≥–æ—Ä–æ–¥–µ –∏–ª–∏ —Ä–∞–π–æ–Ω–µ.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:

–í—ã–≤–æ–¥–∏ –∫–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É:
[–ò–Ω–¥–µ–∫—Å], [–†–µ–≥–∏–æ–Ω / –æ–±–ª–∞—Å—Ç—å], [–†–∞–π–æ–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å)], [–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç], [–£–ª–∏—Ü–∞], [–î–æ–º], [–ö–æ—Ä–ø—É—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)]

–£–¥–∞–ª—è–π –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞ –∏ —Å–∏–º–≤–æ–ª—ã, –º–µ—à–∞—é—â–∏–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—é –∞–¥—Ä–µ—Å–∞: "–¥–æ–º", "–∫–≤.", "–æ—Ä–∏–µ–Ω—Ç–∏—Ä", —Ç–µ–ª–µ—Ñ–æ–Ω—ã, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—Ä–æ—á–µ–µ.

–ù–µ —Å–æ–∫—Ä–∞—â–∞–π –Ω–∞–∑–≤–∞–Ω–∏—è: "–æ–±–ª" ‚Üí "–æ–±–ª–∞—Å—Ç—å", "–≥" ‚Üí "–≥–æ—Ä–æ–¥", "—É–ª" ‚Üí "—É–ª–∏—Ü–∞", –∏ —Ç.–¥.

–ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ. –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞–π –∏—Ö.

–ö–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å ‚Äî —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, —Å –Ω–æ–º–µ—Ä–æ–º:

–ü—Ä–∏–º–µ—Ä:
–í–≤–æ–¥:
1. ,399870, –õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª, –õ–µ–≤-–¢–æ–ª—Å—Ç–æ–≤—Å–∫–∏–π —Ä-–Ω, , –õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π –ø, –û–∫—Ç—è–±—Ä—å—Å–∫–∞—è —É–ª, 1–±, , , –¥–æ–º, –∫–æ—Ä–ø—É—Å, –∫–≤.
2. ,399832, –õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª, –î–∞–Ω–∫–æ–≤—Å–∫–∏–π —Ä-–Ω, , –ó–≤–µ—Ä–µ–≤–æ —Å, , –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∑–∞ 30 –º–∏–Ω, , , –¥–æ–º, –∫–æ—Ä–ø—É—Å, –∫–≤.
3. ,, –ö—É—Ä—Å–∫–∞—è –æ–±–ª, , –ö—É—Ä—Å–∫ –≥, , –ö–æ—Å—É—Ö–∏–Ω–∞ —É–ª, 45–ê. –ê–ó–° –ó–∞–ø—Ä–∞–≤–∫–∞, , , –¥–æ–º, –∫–æ—Ä–ø—É—Å, –∫–≤.
4. ,399370, –õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª, –£—Å–º–∞–Ω—Å–∫–∏–π —Ä-–Ω, –£—Å–º–∞–Ω—å –≥, , –°–æ–≤–µ—Ç—Å–∫–∞—è —É–ª, 15, –î–û–°–¢–ê–í–ö–ê –î–û 17-00 –û–ë–ï–î –° 12-13.00, , –¥–æ–º, –∫–æ—Ä–ø—É—Å, –∫–≤.
5. –¢—Ä–∞—Å—Å–∞ –ú-4 599 –∫–º, 2, –ë–æ–±—Ä–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω, –í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
6. –ø–æ—Å. –ø–æ–¥—Å–æ–±–Ω–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞ —Å–∞–Ω–∞—Ç–æ—Ä–∏—è –∏–º. –¶—é—Ä—É–ø—ã, –ø–æ—Å. –ø–æ–¥—Å–æ–±–Ω–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞ —Å–∞–Ω–∞—Ç–æ—Ä–∏—è –∏–º. –¶—é—Ä—É–ø—ã, –õ–∏—Å–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω, –í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, 397964

–í—ã–≤–æ–¥:
1. 399870, –õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –õ–µ–≤-–¢–æ–ª—Å—Ç–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω, –ø–æ—Å–µ–ª–æ–∫ –õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π, –û–∫—Ç—è–±—Ä—å—Å–∫–∞—è —É–ª–∏—Ü–∞, 1–±
2. 399832, –õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –î–∞–Ω–∫–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω, —Å–µ–ª–æ –ó–≤–µ—Ä–µ–≤–æ
3. –ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥–æ—Ä–æ–¥ –ö—É—Ä—Å–∫, —É–ª–∏—Ü–∞ –ö–æ—Å—É—Ö–∏–Ω–∞, 45–ê
4. 399370, –õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –£—Å–º–∞–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω, –≥–æ—Ä–æ–¥ –£—Å–º–∞–Ω—å, –°–æ–≤–µ—Ç—Å–∫–∞—è —É–ª–∏—Ü–∞, 15
5. –í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ë–æ–±—Ä–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω, –¢—Ä–∞—Å—Å–∞ –ú-4 599 –∫–º, 2
6. 397964, –í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –õ–∏—Å–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω, –ø–æ—Å–µ–ª–æ–∫ –ø–æ–¥—Å–æ–±–Ω–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞ —Å–∞–Ω–∞—Ç–æ—Ä–∏—è –∏–º. –¶—é—Ä—É–ø—ã

–¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–æ—Ç–∞–π —Å–ø–∏—Å–æ–∫:

–í–≤–æ–¥:
{route_block}
"""

def send_route_to_llm(route_name, address_list, api_key, model):
    input_block = "\n".join(f"{i+1}. {addr}" for i, addr in enumerate(address_list))
    prompt = PROMPT_TEMPLATE.format(route_name=route_name, route_block=input_block)

    API_URL = "https://openrouter.ai/api/v1/chat/completions"
    HEADERS = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": model,
        "messages": [{"role": "user", "content": prompt}]
    }

    response = requests.post(API_URL, headers=HEADERS, json=payload)
    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"].strip()
    else:
        return f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} ‚Äî {response.text}"

def extract_routes(filepath, target_route=None):
    try:
        xls = pd.ExcelFile(filepath)
        df = pd.read_excel(xls, sheet_name=0)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞ '{filepath}': {e}")
        return {}
        
    routes = defaultdict(list)
    current_route = None
    seen_kontragents_in_route = set() # <-- –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –≤ –¢–ï–ö–£–©–ï–ú –º–∞—Ä—à—Ä—É—Ç–µ

    # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–æ–∫ --- 
    region_col_name = None
    address_col_name = "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
    kontragent_col_name = None # <-- –ò–º—è –∫–æ–ª–æ–Ω–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
    driver_col_name = None # <--- –ò–º—è –∫–æ–ª–æ–Ω–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—è (–î–æ–±–∞–≤–ª–µ–Ω–æ)
    
    for col in df.columns:
        col_str = str(col).strip() # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
        if region_col_name is None and col_str.startswith("–†–µ–≥–∏–æ–Ω/–ú–∞—Ä—à—Ä—É—Ç"):
            region_col_name = col_str
        if kontragent_col_name is None and col_str.startswith("–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤"):
             kontragent_col_name = col_str
        if driver_col_name is None and col_str.startswith("–í–æ–¥–∏—Ç–µ–ª—å"): # <--- –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É –í–æ–¥–∏—Ç–µ–ª—å (–î–æ–±–∞–≤–ª–µ–Ω–æ)
             driver_col_name = col_str
            
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    missing_cols = []
    if region_col_name is None: missing_cols.append("–∫–æ–ª–æ–Ω–∫–∞, –Ω–∞—á–∏–Ω–∞—é—â–∞—è—Å—è —Å '–†–µ–≥–∏–æ–Ω/–ú–∞—Ä—à—Ä—É—Ç'")
    if address_col_name not in df.columns: missing_cols.append(f"–∫–æ–ª–æ–Ω–∫–∞ '{address_col_name}'")
    if kontragent_col_name is None: missing_cols.append("–∫–æ–ª–æ–Ω–∫–∞, –Ω–∞—á–∏–Ω–∞—é—â–∞—è—Å—è —Å '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤'")
    # if driver_col_name is None: missing_cols.append("–∫–æ–ª–æ–Ω–∫–∞, –Ω–∞—á–∏–Ω–∞—é—â–∞—è—Å—è —Å '–í–æ–¥–∏—Ç–µ–ª—å'") # <-- –ü—Ä–æ–≤–µ—Ä–∫—É –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å, —Ç.–∫. –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è –≠–¢–û–ì–û —Å–∫—Ä–∏–ø—Ç–∞
    
    if missing_cols:
         print(f"‚ùå –í —Ñ–∞–π–ª–µ '{filepath}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: { ' –∏ '.join(missing_cols) }.")
         return {} # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ—Ç
    # --- –ö–æ–Ω–µ—Ü –ø–æ–∏—Å–∫–∞ --- 

    print(f"  ‚ÑπÔ∏è [extract_routes] –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–ª–æ–Ω–∫–∏: –†–µ–≥–∏–æ–Ω='{region_col_name}', –ê–¥—Ä–µ—Å='{address_col_name}', –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç='{kontragent_col_name}'")
    # –î–æ–±–∞–≤–∏–º –ª–æ–≥ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞
    if driver_col_name:
        print(f"  ‚ÑπÔ∏è [extract_routes] –ö–æ–ª–æ–Ω–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω–∞: '{driver_col_name}'")
    else:
        print("  ‚ö†Ô∏è [extract_routes] –ö–æ–ª–æ–Ω–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    for idx, row in df.iterrows():
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
        region = row.get(region_col_name)
        address = row.get(address_col_name)
        kontragent = row.get(kontragent_col_name) # <-- –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
        # driver = row.get(driver_col_name) # <-- –í–æ–¥–∏—Ç–µ–ª—è –∑–¥–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º, —Ç–æ–ª—å–∫–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å–∞
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        is_new_route_marker = False
        if pd.notna(region) and isinstance(region, str) and region.strip():
            potential_new_route = region.strip()
            if pd.isna(address) or not str(address).strip() or current_route is None or potential_new_route != current_route:
                 is_new_route_marker = True
                 current_route = potential_new_route
                 seen_kontragents_in_route.clear() # <-- –û—á–∏—â–∞–µ–º —Å–µ—Ç –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
                 # print(f"   -> –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç: {current_route}") 
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –∫ –¢–ï–ö–£–©–ï–ú–£ –º–∞—Ä—à—Ä—É—Ç—É, –µ—Å–ª–∏:
        # 1. –ú–∞—Ä—à—Ä—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
        # 2. –ê–¥—Ä–µ—Å –µ—Å—Ç—å
        # 3. –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –µ—Å—Ç—å –∏ –æ–Ω –µ—â–µ –ù–ï –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –≤ –≠–¢–û–ú –º–∞—Ä—à—Ä—É—Ç–µ
        if current_route and pd.notna(address) and isinstance(address, str) and address.strip():
            if pd.notna(kontragent) and isinstance(kontragent, str) and kontragent.strip():
                kontragent_key = kontragent.strip()
                if kontragent_key not in seen_kontragents_in_route:
                    seen_kontragents_in_route.add(kontragent_key) # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –≤ —Å–µ—Ç
                    routes[current_route].append((idx + 2, address.strip()))
                    # print(f"     –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –¥–ª—è '{kontragent_key}' –∫ '{current_route}' (—Å—Ç—Ä–æ–∫–∞ Excel {idx+2})")
                # else:
                    # print(f"     –ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏ {idx+2}: –¥—É–±–ª–∏–∫–∞—Ç –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ '{kontragent_key}' –≤ –º–∞—Ä—à—Ä—É—Ç–µ '{current_route}'")
            # else:
                 # print(f"     –ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏ {idx+2}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ '{current_route}'")
        
    # –£–¥–∞–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –±–µ–∑ –∞–¥—Ä–µ—Å–æ–≤ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    routes = {r: adds for r, adds in routes.items() if adds}

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
    if target_route:
        if target_route in routes:
             return {target_route: routes[target_route]}
        else:
             print(f"‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç '{target_route}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ (–ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è.")
             return {}
    
    return routes

def is_only_region_and_district(text):
    doc = Doc(text)
    doc.segment(segmenter)
    doc.tag_ner(ner_tagger)
    entities = [span.text.lower() for span in doc.spans if span.type == "LOC"]
    if not entities:
        return False
    return all(any(kw in ent for kw in ["–æ–±–ª–∞—Å—Ç—å", "–∫—Ä–∞–π", "—Ä–∞–π–æ–Ω"]) for ent in entities)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
def sanitize_filename(filename):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"""
    if not isinstance(filename, str):
        return "unnamed"
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    s = filename.strip().replace(' ', '_')
    return s if s else "unnamed"

if __name__ == "__main__":
    main()
